name: CI/CD
on:
  push:
    branches: [ "main", "release" ]
  pull_request:
    branches: [ "main", "release" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: "temurin"

      - name: make application-database.yml
        run: |
          cd ./src/main/resources
          touch .application-database.yml
          echo "${{ secrets.DATABASE }}" >> ./application-database.yml
        shell: bash

      - name: make application-secret.yml
        run: |
          cd ./src/main/resources
          touch .application-secret.yml
          echo "${{ secrets.SECRET }}" >> ./application-secret.yml
        shell: bash

      - name: grant execute permission for gradlew
        run: |
          chmod +x gradlew
      - name: project build
        run: |
          ./gradlew build
      - name: build docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/hidden-piece . # zerobird

      - name: login docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: push docker hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/hidden-piece # zerobird

  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: send to ec2
        uses: appleboy/scp-action@master
        with:
          username: ${{ secrets.WAS_USERNAME }}
          host: ${{ secrets.WAS_HOST }}
          key: ${{ secrets.WAS_KEY }} # pem key
          port: 22
          source: "docker/deploy.sh,docker/docker-compose-app.yml,docker/docker-compose-redis.yml"
          target: "/home/${{ secrets.WAS_USERNAME }}"

      - name: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.WAS_HOST }}
          username: ${{ secrets.WAS_USERNAME }} # ubuntu
          key: ${{ secrets.WAS_KEY }} # pem key
          envs: WAS_HOST=${{ secrets.WAS_HOST }}
          script: |
            sudo chmod 666 /var/run/docker.sock
            docker-compose -f /home/${{ secrets.WAS_USERNAME }}/docker/docker-compose-redis.yml up -d
            chmod 777 /home/${{ secrets.WAS_USERNAME }}/docker/deploy.sh
            /home/${{ secrets.WAS_USERNAME }}/docker/deploy.sh
            docker image prune -f
